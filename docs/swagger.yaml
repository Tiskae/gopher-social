basePath: /v1
definitions:
  main.CreateUserTokenPayload:
    properties:
      password:
        maxLength: 72
        type: string
      username:
        maxLength: 255
        type: string
    required:
    - password
    - username
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GopherSocial, a social network for gophers
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GopherSocial  API
  version: "1.0"
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Createss a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Invalid body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Registers a user
      tags:
      - authentication
  /health:
    get:
      description: Checks the health of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "500":
          description: Internal server error
          schema:
            type: string
      summary: API health
      tags:
      - health
  /posts:
    post:
      consumes:
      - application/json
      description: Create a post for the user with the auth token
      parameters:
      - description: Post title
        in: body
        maxLength: 100
        name: title
        required: true
        schema:
          type: string
      - description: Post content
        in: body
        maxLength: 1000
        name: content
        required: true
        schema:
          type: string
      - description: Post tags
        in: body
        name: tags
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete the post with the ID provided
      parameters:
      - description: ID of the user to follow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Invalid post ID
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete a post
      tags:
      - posts
    get:
      description: Fetches a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid post ID
          schema:
            type: string
        "404":
          description: post not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Fetches a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post with the post body
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post title
        in: body
        maxLength: 100
        name: title
        schema:
          type: string
      - description: Post body
        in: body
        maxLength: 1000
        name: content
        schema:
          type: string
      - description: Post tags
        in: body
        name: tags
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid body
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update a post
      tags:
      - posts
  /posts/{post_id}/comments:
    post:
      description: Create a new comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      - description: Comment content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Comment'
        "400":
          description: Invalid body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a comment
      tags:
      - comments
  /posts/id/comments:
    get:
      description: Create a new comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Comment'
            type: array
        "400":
          description: Invalid post ID
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get post comments
      tags:
      - comments
  /users/{id}:
    get:
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Fetches a user profile
      tags:
      - users
  /users/{user_id}/follow:
    put:
      consumes:
      - application/json
      description: Follow a user with the ID provided
      parameters:
      - description: ID of the user to follow
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed successfully
          schema:
            type: nil
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Follow a user
      tags:
      - users
  /users/{user_id}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user with the ID provided
      parameters:
      - description: ID of the user to unfollow
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed successfully
          schema:
            type: nil
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Unfollow a user
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activate/Register a user by invitation toke
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Activate/Register a user
      tags:
      - users
  /users/feed:
    get:
      description: Get the feed for the user with the auth token
      parameters:
      - description: How many posts to return
        in: query
        name: limit
        type: integer
      - description: Offset to start from
        in: query
        name: offset
        type: integer
      - description: Whether to sort in ascending (asc) or descending(desc, default)
        in: query
        name: limit
        type: string
      - collectionFormat: csv
        description: Tags to filter by
        in: query
        items:
          type: string
        name: tags
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.PostWithMetadata'
            type: array
        "400":
          description: Invalid query params
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get user feed
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
